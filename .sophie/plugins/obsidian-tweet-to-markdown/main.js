/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugin's github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    bearerToken: null,
    noteLocation: '',
    downloadAssets: false,
    assetLocation: '',
    filename: null,
};
class TTMSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Tweet to Markdown' });
        new obsidian.Setting(containerEl)
            .setName('Bearer Token')
            .setDesc(obsidian.Platform.isMobileApp
            ? 'Enter your V2 Twitter bearer token.'
            : 'Enter your V2 Twitter bearer token, or store it in the environment variable TWITTER_BEARER_TOKEN.')
            .addText(text => text
            .setPlaceholder('Twitter v2 bearer token')
            .setValue(this.plugin.settings.bearerToken)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.bearerToken = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Note Location')
            .setDesc('Where to store the created notes. Defaults to the root of the vault.')
            .addText(text => text
            .setPlaceholder('tweets/')
            .setValue(this.plugin.settings.noteLocation)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.noteLocation = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Download images')
            .setDesc('Whether to link images or download them to your vault.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.downloadAssets)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.downloadAssets = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Image Location')
            .setDesc('Where to store the downloaded images. Defaults to `assets/`.')
            .addText(text => text
            .setPlaceholder('assets/')
            .setValue(this.plugin.settings.assetLocation)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.assetLocation = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Filename')
            .setDesc('The name to give the saved tweet file. You can use the placeholders [[handle]], [[name]], [[text]] and [[id]]. Defaults to "[[handle]] - [[id]]"')
            .addText(text => text
            .setPlaceholder('[[handle]] - [[id]]')
            .setValue(this.plugin.settings.filename)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.filename = value;
            yield this.plugin.saveSettings();
        })));
    }
}

/**
 * Credit: lautis/unicode-substring
 * Rewritten for Obsidian mobile functionality.
 */
const charAt = (string, index) => {
    const first = string.charCodeAt(index);
    let second;
    if (first >= 0xd800 && first <= 0xdbff && string.length > index + 1) {
        second = string.charCodeAt(index + 1);
        if (second >= 0xdc00 && second <= 0xdfff) {
            return string.substring(index, index + 2);
        }
    }
    return string[index];
};
const slice = (string, start, end) => {
    let accumulator = '';
    let character;
    let stringIndex = 0;
    let unicodeIndex = 0;
    const length = string.length;
    while (stringIndex < length) {
        character = charAt(string, stringIndex);
        if (unicodeIndex >= start && unicodeIndex < end) {
            accumulator += character;
        }
        stringIndex += character.length;
        unicodeIndex += 1;
    }
    return accumulator;
};
const toNumber = (value, fallback) => {
    if (value === undefined) {
        return fallback;
    }
    else {
        return Number(value);
    }
};
const unicodeSubstring = (string, start, end) => {
    const realStart = toNumber(start, 0);
    const realEnd = toNumber(end, string.length);
    if (realEnd === realStart) {
        return '';
    }
    else if (realEnd > realStart) {
        return slice(string, realStart, realEnd);
    }
    else {
        return slice(string, realEnd, realStart);
    }
};

/**
 * Parses out the tweet ID from the URL the user provided
 * @param {string} src - The URL
 */
const getTweetID = (src) => {
    // Create a URL object with the source. If it fails, it's not a URL.
    const url = new URL(src);
    const id = url.pathname
        .split('/')
        .filter(piece => !!piece) // remove empty strings from array
        .slice(-1)[0];
    if (!id) {
        throw new Error('URL does not seem to be a tweet.');
    }
    return id;
};
/**
 * Fetches a tweet object from the Twitter v2 API
 * @param {string} id - The ID of the tweet to fetch from the API
 * @param {string} bearer - The bearer token
 * @returns {Tweet} - The tweet from the Twitter API
 */
const getTweet = (id, bearer) => __awaiter(void 0, void 0, void 0, function* () {
    const twitterUrl = new URL(`https://api.twitter.com/2/tweets/${id}`);
    const params = new URLSearchParams({
        expansions: 'author_id,attachments.poll_ids,attachments.media_keys',
        'user.fields': 'name,username,profile_image_url',
        'tweet.fields': 'attachments,public_metrics,entities,conversation_id,referenced_tweets',
        'media.fields': 'url',
        'poll.fields': 'options',
    });
    let tweetRequest;
    try {
        tweetRequest = yield obsidian.request({
            method: 'GET',
            url: `${twitterUrl.href}?${params.toString()}`,
            headers: { Authorization: `Bearer ${bearer}` },
        });
    }
    catch (error) {
        if (error.request) {
            throw new Error('There seems to be a connection issue.');
        }
        else {
            console.error(error);
            throw error;
        }
    }
    const tweet = JSON.parse(tweetRequest);
    if (tweet.errors) {
        throw new Error(tweet.errors[0].detail);
    }
    if (tweet === null || tweet === void 0 ? void 0 : tweet.reason) {
        switch (tweet.reason) {
            case 'client-not-enrolled':
            default:
                throw new Error('There seems to be a problem with your bearer token.');
        }
    }
    return tweet;
});
/**
 * Creates markdown table to capture poll options and votes
 * @param {Poll[]} polls - The polls array provided by the Twitter v2 API
 * @returns {string} - Markdown table as a string of the poll
 */
const createPollTable = (polls) => {
    return polls.map((poll) => {
        const table = ['\n|Option|Votes|', '|---|:---:|'];
        const options = poll.options.map(option => `|${option.label}|${option.votes}|`);
        return table.concat(options).join('\n');
    });
};
/**
 * Filename sanitization. Credit: parshap/node-sanitize-filename
 * Rewrite to allow functionality on Obsidian mobile.
 */
const illegalRe = /[/?<>\\:*|"]/g;
// eslint-disable-next-line no-control-regex
const controlRe = /[\x00-\x1f\x80-\x9f]/g;
const reservedRe = /^\.+$/;
const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
const windowsTrailingRe = /[. ]+$/;
/**
 * Sanitize a filename to remove any illegal characters.
 * Also keeps the filename to 255 bytes or below.
 * @param filename string
 * @returns string
 */
const sanitizeFilename = (filename) => {
    filename = filename
        .replace(illegalRe, '')
        .replace(controlRe, '')
        .replace(reservedRe, '')
        .replace(windowsReservedRe, '')
        .replace(windowsTrailingRe, '');
    return truncateBytewise(filename, 252);
};
/**
 * Truncate a string to a specified number of bytes
 * @param string the string to truncate
 * @param length the maximum length in bytes of the trimmed string
 * @returns string
 */
const truncateBytewise = (string, length) => {
    const originalLength = length;
    while (new TextEncoder().encode(string).length > originalLength) {
        string = unicodeSubstring(string, 0, length--);
    }
    return string;
};
/**
 * Creates a filename based on the tweet and the user defined options.
 * @param {Tweet} tweet - The entire tweet object from the Twitter v2 API
 * @param {filename} string - The filename provided by the user
 * @returns {string} - The filename based on tweet and options
 */
const createFilename = (tweet, filename = '') => {
    filename = filename ? filename : '[[handle]] - [[id]]';
    filename = filename.replace(/\.md$/, ''); // remove md extension if provided
    filename = filename.replace('[[name]]', tweet.includes.users[0].name);
    filename = filename.replace('[[handle]]', tweet.includes.users[0].username);
    filename = filename.replace('[[id]]', tweet.data.id);
    filename = filename.replace('[[text]]', tweet.data.text);
    return sanitizeFilename(filename) + '.md';
};
/**
 * Creates media links to embed media into the markdown file
 * @param {Media[]} media - The tweet media object provided by the Twitter v2 API
 * @returns {string[]} - An array of markdown image links
 */
const createMediaElements = (settings, media) => {
    return media
        .map((medium) => {
        if (settings.downloadAssets) {
            const assetLocation = settings.assetLocation || 'assets';
            const filepath = obsidian.normalizePath(`${assetLocation}/${medium.media_key}.jpg`);
            switch (medium.type) {
                case 'photo':
                    return `\n![${medium.media_key}](${filepath})`;
            }
        }
        else {
            switch (medium.type) {
                case 'photo':
                    return `\n![${medium.media_key}](${medium.url})`;
            }
        }
    })
        .filter(medium => !!medium);
};
/**
 * Creates the entire Markdown string of the provided tweet
 */
const buildMarkdown = (app, plugin, downloadManager, tweet, type = 'normal') => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    let metrics = [];
    metrics = [
        `likes: ${tweet.data.public_metrics.like_count}`,
        `retweets: ${tweet.data.public_metrics.retweet_count}`,
        `replies: ${tweet.data.public_metrics.reply_count}`,
    ];
    let text = tweet.data.text;
    const user = tweet.includes.users[0];
    /**
     * replace entities with markdown links
     */
    if ((_a = tweet.data) === null || _a === void 0 ? void 0 : _a.entities) {
        /**
         * replace any mentions, hashtags, cashtags, urls with links
         */
        ((_b = tweet.data.entities) === null || _b === void 0 ? void 0 : _b.mentions) &&
            ((_c = tweet.data.entities) === null || _c === void 0 ? void 0 : _c.mentions.forEach(({ username }) => {
                text = text.replace(`@${username}`, `[@${username}](https://twitter.com/${username})`);
            }));
        ((_d = tweet.data.entities) === null || _d === void 0 ? void 0 : _d.hashtags) &&
            ((_e = tweet.data.entities) === null || _e === void 0 ? void 0 : _e.hashtags.forEach(({ tag }) => {
                text = text.replace(`#${tag}`, `[#${tag}](https://twitter.com/hashtag/${tag}) `);
            }));
        ((_f = tweet.data.entities) === null || _f === void 0 ? void 0 : _f.cashtags) &&
            ((_g = tweet.data.entities) === null || _g === void 0 ? void 0 : _g.cashtags.forEach(({ tag }) => {
                text = text.replace(`$${tag}`, `[$${tag}](https://twitter.com/search?q=%24${tag})`);
            }));
        ((_h = tweet.data.entities) === null || _h === void 0 ? void 0 : _h.urls) &&
            ((_j = tweet.data.entities) === null || _j === void 0 ? void 0 : _j.urls.forEach(url => {
                text = text.replace(url.url, `[${url.display_url}](${url.expanded_url})`);
            }));
    }
    /**
     * Define the frontmatter as the name, handle, and source url
     */
    const frontmatter = [
        '---',
        `author: "${user.name}"`,
        `handle: "@${user.username}"`,
        `source: "https://twitter.com/${user.username}/status/${tweet.data.id}"`,
        ...metrics,
        '---',
    ];
    const assetPath = plugin.settings.assetLocation || 'assets';
    let markdown = [
        `![${user.username}](${plugin.settings.downloadAssets
            ? obsidian.normalizePath(`${assetPath}/${user.username}-${user.id}.jpg`)
            : user.profile_image_url})`,
        `${user.name} ([@${user.username}](https://twitter.com/${user.username}))`,
        '\n',
        `${text}`, // text of the tweet
    ];
    // markdown requires 2 line breaks for actual new lines
    markdown = markdown.map(line => line.replace(/\n/g, '\n\n'));
    // Add in other tweet elements
    if ((_k = tweet.includes) === null || _k === void 0 ? void 0 : _k.polls) {
        markdown = markdown.concat(createPollTable(tweet.includes.polls));
    }
    if ((_l = tweet.includes) === null || _l === void 0 ? void 0 : _l.media) {
        markdown = markdown.concat(createMediaElements(plugin.settings, (_m = tweet.includes) === null || _m === void 0 ? void 0 : _m.media));
    }
    // download images
    if (plugin.settings.downloadAssets) {
        downloadImages(app, downloadManager, tweet, plugin.settings.assetLocation || 'assets');
    }
    // check for quoted tweets to be included
    if ((_o = tweet.data) === null || _o === void 0 ? void 0 : _o.referenced_tweets) {
        for (const subtweet_ref of (_p = tweet.data) === null || _p === void 0 ? void 0 : _p.referenced_tweets) {
            if ((subtweet_ref === null || subtweet_ref === void 0 ? void 0 : subtweet_ref.type) === 'quoted') {
                const subtweet = yield getTweet(subtweet_ref.id, plugin.bearerToken);
                const subtweet_text = yield buildMarkdown(app, plugin, downloadManager, subtweet, 'quoted');
                markdown.push('\n\n' + subtweet_text);
            }
        }
    }
    // indent all lines for a quoted tweet
    if (type === 'quoted') {
        markdown = markdown.map(line => '> ' + line);
    }
    switch (type) {
        case 'normal':
            return frontmatter.concat(markdown).join('\n');
        case 'thread':
            return '\n\n---\n\n' + markdown.join('\n');
        case 'quoted':
            return '\n\n' + markdown.join('\n');
        default:
            return '\n\n' + markdown.join('\n');
    }
});
const downloadImages = (app, downloadManager, tweet, assetLocation = 'assets') => {
    var _a, _b;
    const user = tweet.includes.users[0];
    // create the image folder
    app.vault.createFolder(assetLocation).catch(() => { });
    let filesToDownload = [];
    filesToDownload.push({
        url: user.profile_image_url,
        title: `${user.username}-${user.id}.jpg`,
    });
    (_b = (_a = tweet.includes) === null || _a === void 0 ? void 0 : _a.media) === null || _b === void 0 ? void 0 : _b.forEach((medium) => {
        switch (medium.type) {
            case 'photo':
                filesToDownload.push({
                    url: medium.url,
                    title: `${medium.media_key}.jpg`,
                });
                break;
        }
    });
    //Filter out tweet images that already exist locally
    filesToDownload = filesToDownload.filter(file => !doesFileExist(app, `${assetLocation}/${file.title}`));
    if (!filesToDownload.length) {
        return;
    }
    downloadManager.addDownloads(filesToDownload.map((file) => __awaiter(void 0, void 0, void 0, function* () {
        const imageRequest = yield fetch(file.url, {
            method: 'GET',
        });
        const image = yield imageRequest.arrayBuffer();
        return yield app.vault.createBinary(`${assetLocation}/${file.title}`, image);
    })));
};
const doesFileExist = (app, filepath) => {
    filepath = obsidian.normalizePath(filepath);
    // see if file already exists
    let file;
    try {
        file = app.vault.getAbstractFileByPath(filepath);
    }
    catch (error) {
        return false;
    }
    return !!file;
};

const createDownloadManager = () => {
    const downloadList = [];
    let isAnnounced = false;
    const addDownloads = (downloads) => {
        downloadList.push(...downloads);
        if (!isAnnounced) {
            isAnnounced = true;
            new obsidian.Notice('Downloading images...');
        }
    };
    const finishDownloads = () => Promise.all(downloadList);
    return {
        addDownloads,
        finishDownloads,
    };
};

class TweetCompleteModal extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
    }
    onOpen() {
        const { contentEl, titleEl } = this;
        titleEl.setText('Name tweet file');
        let filename = createFilename(this.plugin.currentTweet, this.plugin.settings.filename);
        new obsidian.Setting(contentEl)
            .setName('Filename')
            .setDesc('Set the name of the file. You can use the placeholders [[handle]], [[name]], [[text]], and [[id]].')
            .addText(input => {
            input.setValue(filename);
            input
                .onChange(value => {
                filename = createFilename(this.plugin.currentTweet, value);
            })
                .setPlaceholder('[[handle]] - [[id]]');
        });
        new obsidian.Setting(contentEl).addButton(button => {
            button.setButtonText('Save Tweet');
            button.onClick(() => __awaiter(this, void 0, void 0, function* () {
                // see if file already exists
                const file = doesFileExist(this.app, `${this.plugin.settings.noteLocation}/${filename}`);
                if (file) {
                    new obsidian.Notice(`The file ${filename} already exists`);
                    return;
                }
                if (this.plugin.settings.noteLocation) {
                    // create the directory
                    const doesFolderExist = yield this.app.vault.adapter.exists(this.plugin.settings.noteLocation);
                    if (!doesFolderExist) {
                        yield this.app.vault
                            .createFolder(this.plugin.settings.noteLocation)
                            .catch(error => {
                            new obsidian.Notice('Error creating tweet directory.');
                            console.error('There was an error creating the tweet directory.', error);
                        });
                    }
                }
                // write the note to file
                yield this.app.vault.create(`${this.plugin.settings.noteLocation}/${filename}`, this.plugin.currentTweetMarkdown);
                new obsidian.Notice(`${filename} created.`);
                this.close();
            }));
        });
    }
    onClose() {
        const { contentEl, titleEl } = this;
        titleEl.empty();
        contentEl.empty();
        // clean up
        this.plugin.currentTweet = null;
        this.plugin.currentTweetMarkdown = null;
    }
}

class TweetUrlModal extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.url = '';
        this.thread = false;
        this.plugin = plugin;
    }
    onOpen() {
        const { contentEl, titleEl } = this;
        titleEl.setText('Download Tweet');
        new obsidian.Setting(contentEl)
            .setName('Tweet URL')
            .setDesc('Enter the URL of the tweet to download.')
            .addText(input => {
            input
                .setValue(this.url)
                .onChange(value => (this.url = value))
                .setPlaceholder('Tweet URL');
        });
        new obsidian.Setting(contentEl)
            .setName('Tweet thread')
            .setDesc('Download a tweet thread. (Put the link to the LAST tweet in the thread).')
            .addToggle(toggle => {
            toggle.setValue(false).onChange(value => {
                this.thread = value;
            });
        });
        new obsidian.Setting(contentEl)
            .setClass('download_tweet_button')
            .addButton(button => {
            button.setButtonText('Download Tweet');
            button.onClick(() => __awaiter(this, void 0, void 0, function* () {
                // error checking for kickoff
                let bearerToken;
                if (obsidian.Platform.isMobileApp) {
                    bearerToken = this.plugin.settings.bearerToken || '';
                }
                else {
                    bearerToken =
                        this.plugin.settings.bearerToken ||
                            process.env.TWITTER_BEARER_TOKEN ||
                            '';
                }
                if (!this.url) {
                    new obsidian.Notice('No tweet link provided.');
                    return;
                }
                let id = '';
                try {
                    id = getTweetID(this.url);
                }
                catch (error) {
                    new obsidian.Notice(error.message);
                    return;
                }
                if (!bearerToken) {
                    new obsidian.Notice('Bearer token was not found.');
                    return;
                }
                this.plugin.bearerToken = bearerToken;
                this.downloadManager = createDownloadManager();
                // set the button as loading
                button.setButtonText('Loading...');
                button.setDisabled(true);
                // fetch tweet
                try {
                    this.plugin.currentTweet = yield getTweet(id, bearerToken);
                }
                catch (error) {
                    new obsidian.Notice(error.message);
                    // set the button as loading
                    button.setButtonText('Download Tweet');
                    button.setDisabled(false);
                    return;
                }
                this.plugin.currentTweetMarkdown = '';
                // special handling for threads
                if (this.thread) {
                    // check if this is the head tweet
                    while (this.plugin.currentTweet.data.conversation_id !==
                        this.plugin.currentTweet.data.id) {
                        const markdown = yield buildMarkdown(this.app, this.plugin, this.downloadManager, this.plugin.currentTweet, 'thread');
                        this.plugin.currentTweetMarkdown =
                            markdown + this.plugin.currentTweetMarkdown;
                        // load in parent tweet
                        const [parent_tweet] = this.plugin.currentTweet.data.referenced_tweets.filter(ref_tweet => ref_tweet.type === 'replied_to');
                        this.plugin.currentTweet = yield getTweet(parent_tweet.id, bearerToken);
                    }
                }
                const markdown = yield buildMarkdown(this.app, this.plugin, this.downloadManager, this.plugin.currentTweet);
                this.plugin.currentTweetMarkdown =
                    markdown + this.plugin.currentTweetMarkdown;
                yield this.downloadManager
                    .finishDownloads()
                    .then(results => {
                    if (results.length) {
                        new obsidian.Notice('Images downloaded.');
                    }
                })
                    .catch(error => {
                    new obsidian.Notice('There was an error downloading the images.');
                    console.error(error);
                });
                this.close();
            }));
        });
    }
    onClose() {
        const { contentEl, titleEl } = this;
        titleEl.empty();
        contentEl.empty();
        if (this.plugin.currentTweetMarkdown) {
            this.plugin.tweetComplete = new TweetCompleteModal(this.plugin.app, this.plugin);
            this.plugin.tweetComplete.open();
        }
    }
}

class TTM extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.info('loading ttm');
            obsidian.addIcon('twitter', '<path fill="currentColor" stroke="currentColor" d="M50.583 35.174c1.361-.402 3.076-.258 4.5-.44a58.326 58.326 0 007.834-1.572c8.806-2.383 17.139-6.943 23.833-13.147 2.062-1.91 4.303-3.939 5.917-6.257h.083c3.816 7.251 3.671 15.886-1.344 22.583-1.275 1.702-3.033 3.74-4.99 4.667v.083c3.307-.027 6.312-1.211 9.25-2.583 0 7.586-4.087 14.845-10.916 18.354-1.642.844-3.549 1.747-5.417 1.896v.083c2.866.807 6.173 1.05 9.084.333-.173 1.982-1.734 4.281-2.886 5.834-3.764 5.07-9.756 8.333-16.114 8.333 1.602 1.471 3.6 2.649 5.5 3.692a41.641 41.641 0 0017.166 5.05c2.5.172 4.93-.152 7.417-.159v.084c-2.239 1.191-4.352 2.578-6.667 3.64-4.485 2.06-9.222 3.599-14.083 4.475-3.516.634-6.939.718-10.5.718-4.04 0-7.936-.12-11.917-.9-14.826-2.908-27.945-11.673-36.221-24.35-4.66-7.138-7.832-15.174-9.242-23.583-.465-2.772-.588-5.543-.78-8.334-.066-.976.374-2.43.027-3.33-.168-.432-.769-.727-1.117-1.003a50.039 50.039 0 01-2.5-2.098c-2.432-2.2-4.773-4.77-6.5-7.569l4.167 1.524 7.5 1.643v-.083c-1.046-.452-1.967-1.27-2.834-1.994-2.753-2.298-5.13-5.684-6.083-9.173 1.223.36 2.427 1.252 3.583 1.812 1.972.954 4.064 1.691 6.167 2.295.88.253 1.994.713 2.917.69.46-.012.843-.552 1.166-.833.89-.77 1.769-1.517 2.75-2.171 2.52-1.68 5.43-2.732 8.417-3.174 9.758-1.444 19.486 4.708 22.414 14.13.706 2.271 1.075 4.79.912 7.168-.085 1.234-.393 2.441-.493 3.666z"/>');
            yield this.loadSettings();
            // clean up null string default settings
            if (this.settings.noteLocation === null) {
                this.settings.noteLocation = '';
                console.info('Cleaning up note location setting.');
                yield this.saveSettings();
            }
            if (this.settings.assetLocation === null) {
                this.settings.assetLocation = '';
                console.info('Cleaning up asset location setting.');
                yield this.saveSettings();
            }
            // add twitter icon with a delay so it won't end up first
            this.addRibbonIcon('twitter', 'Tweet to Markdown', () => {
                new TweetUrlModal(this.app, this).open();
            });
            this.addCommand({
                id: 'open-tweet-url-modal',
                name: 'Download Tweet from URL',
                callback: () => {
                    new TweetUrlModal(this.app, this).open();
                },
            });
            this.addSettingTab(new TTMSettingTab(this.app, this));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = TTM;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
