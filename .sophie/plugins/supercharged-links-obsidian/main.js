/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class Field {
    constructor(name = "", values = {}, id = "", isMulti = false, isCycle = false, valuesListNotePath = "") {
        this.name = name;
        this.values = values;
        this.id = id;
        this.isCycle = isCycle;
        this.isMulti = isMulti;
        this.valuesListNotePath = valuesListNotePath;
        this.insertNewValue.bind(this);
    }
    insertNewValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            let newKey = 1;
            Object.keys(this.values).forEach(key => {
                if (parseInt(key) && parseInt(key) >= newKey) {
                    newKey = parseInt(key) + 1;
                }
            });
            this.values[newKey.toString()] = value;
            return newKey.toString();
        });
    }
    static copyProperty(target, source) {
        target.id = source.id;
        target.name = source.name;
        target.isCycle = source.isCycle;
        target.isMulti = source.isMulti;
        target.valuesListNotePath = source.valuesListNotePath;
        Object.keys(source.values).forEach(k => {
            target.values[k] = source.values[k];
        });
        Object.keys(target.values).forEach(k => {
            if (!Object.keys(source.values).includes(k)) {
                delete target.values[k];
            }
        });
    }
}

class FieldSetting extends obsidian.Setting {
    constructor(containerEl, property, app, plugin) {
        super(containerEl);
        this.containerEl = containerEl;
        this.property = property;
        this.app = app;
        this.plugin = plugin;
        this.setTextContentWithname();
        this.addEditButton();
        this.addDeleteButton();
    }
    setTextContentWithname() {
        this.infoEl.textContent =
            `${this.property.name}: [${Object.keys(this.property.values).map(k => this.property.values[k]).join(', ')}]`;
    }
    addEditButton() {
        this.addButton((b) => {
            b.setIcon("pencil")
                .setTooltip("Edit")
                .onClick(() => {
                let modal = new FieldSettingsModal(this.app, this.plugin, this.containerEl, this, this.property);
                modal.open();
            });
        });
    }
    addDeleteButton() {
        this.addButton((b) => {
            b.setIcon("trash")
                .setTooltip("Delete")
                .onClick(() => {
                const currentExistingProperty = this.plugin.initialProperties.filter(p => p.id == this.property.id)[0];
                if (currentExistingProperty) {
                    this.plugin.initialProperties.remove(currentExistingProperty);
                }
                this.settingEl.parentElement.removeChild(this.settingEl);
                this.plugin.saveSettings();
            });
        });
    }
    static getValuesListFromNote(notePath, app) {
        return new Promise((resolve, reject) => {
            let values = [];
            const files = app.vault.getMarkdownFiles().filter(mdFile => mdFile.path == notePath);
            if (files.length > 0) {
                const file = files[0];
                app.vault.read(file).then((result) => {
                    result.split('\n').forEach(line => {
                        if (/^(.*)$/.test(line)) {
                            values.push(line.trim());
                        }
                    });
                    resolve(values);
                });
            }
            else {
                resolve([]);
            }
        });
    }
}

class FieldSettingsModal extends obsidian.Modal {
    constructor(app, plugin, parentSettingContainer, parentSetting, property) {
        super(app);
        this.valuesPromptComponents = [];
        this.saved = false;
        this.new = true;
        this.plugin = plugin;
        this.parentSetting = parentSetting;
        this.initialProperty = new Field();
        this.parentSettingContainer = parentSettingContainer;
        if (property) {
            this.new = false;
            this.property = property;
            this.initialProperty.name = property.name;
            this.initialProperty.id = property.id;
            Object.keys(property.values).forEach(k => {
                this.initialProperty.values[k] = property.values[k];
            });
        }
        else {
            let newId = 1;
            this.plugin.initialProperties.forEach(prop => {
                if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
                    newId = parseInt(prop.id) + 1;
                }
            });
            this.property = new Field();
            this.property.id = newId.toString();
            this.initialProperty.id = newId.toString();
        }
    }
    onOpen() {
        if (this.property.name == "") {
            this.titleEl.setText(`Add a property and set predefined`);
        }
        else {
            this.titleEl.setText(`Manage settings values for ${this.property.name}`);
        }
        this.createForm();
    }
    onClose() {
        Object.assign(this.property, this.initialProperty);
        if (!this.new) {
            this.parentSetting.infoEl.textContent =
                `${this.property.name}: [${Object.keys(this.property.values).map(k => this.property.values[k]).join(', ')}]`;
        }
        else if (this.saved) {
            new FieldSetting(this.parentSettingContainer, this.property, this.app, this.plugin);
        }
    }
    setValueListText(header) {
        header.setText(`Preset values: ${Object.values(this.property.values).join(', ')}`);
    }
    createnameInputContainer(parentNode) {
        const propertyNameContainerLabel = parentNode.createDiv();
        propertyNameContainerLabel.setText(`Property Name:`);
        const input = new obsidian.TextComponent(parentNode);
        const name = this.property.name;
        input.setValue(name);
        input.setPlaceholder("Name of the property");
        input.onChange(value => {
            this.property.name = value;
            this.titleEl.setText(`Manage predefined values for ${this.property.name}`);
            FieldSettingsModal.removeValidationError(input);
        });
        return input;
    }
    createTogglerContainer(parentNode, label) {
        const propertyContainerLabel = parentNode.createDiv({
            cls: 'frontmatter-checkbox-toggler'
        });
        propertyContainerLabel.setText(label);
        const toggler = new obsidian.ToggleComponent(parentNode);
        return toggler;
    }
    createListNoteContainer(parentNode) {
        const listNoteContainerLabel = parentNode.createDiv();
        listNoteContainerLabel.setText(`Path of the note containing the values:`);
        const input = new obsidian.TextComponent(parentNode);
        const listNotePath = this.property.valuesListNotePath;
        input.setValue(listNotePath);
        input.setPlaceholder("Path/of/the/note.md");
        input.onChange(value => this.property.valuesListNotePath = value);
        return input;
    }
    removePresetValue(key) {
        let newValues = {};
        for (let _key in this.property.values) {
            if (key !== _key) {
                newValues[_key] = this.property.values[_key];
            }
        }
        this.property.values = newValues;
    }
    createValueContainer(parentNode, header, key) {
        const values = this.property.values;
        const presetValue = values[key];
        const valueContainer = parentNode.createDiv({
            cls: 'frontmatter-prompt-container',
        });
        const input = new obsidian.TextComponent(valueContainer);
        input.setValue(presetValue);
        input.onChange(value => {
            this.property.values[key] = value;
            this.setValueListText(header);
            FieldSettingsModal.removeValidationError(input);
        });
        const valueRemoveButton = new obsidian.ButtonComponent(valueContainer);
        valueRemoveButton.setIcon("trash")
            .onClick((evt) => {
            evt.preventDefault;
            this.removePresetValue(key);
            this.setValueListText(header);
            parentNode.removeChild(valueContainer);
            this.valuesPromptComponents.remove(input);
        });
        if (key != Object.keys(this.property.values)[0]) {
            const valueUpgradeButton = new obsidian.ButtonComponent(valueContainer);
            valueUpgradeButton.setButtonText("▲");
            valueUpgradeButton.onClick((evt) => {
                const thisValue = values[key];
                const upperComponent = this.valuesPromptComponents[this.valuesPromptComponents.indexOf(input) - 1];
                if (upperComponent) {
                    const upperValue = upperComponent.inputEl.value;
                    const upperKey = Object.keys(values).filter(k => values[k] == upperValue)[0];
                    if (upperKey) {
                        upperComponent.setValue(thisValue);
                        values[upperKey] = thisValue;
                        input.setValue(upperValue);
                        values[key] = upperValue;
                    }
                }
            });
        }
        return input;
    }
    createForm() {
        const div = this.contentEl.createDiv({
            cls: "frontmatter-prompt-div"
        });
        const mainDiv = div.createDiv({
            cls: "frontmatter-prompt-form"
        });
        /* Property Name Section */
        const nameContainer = mainDiv.createDiv();
        this.namePromptComponent = this.createnameInputContainer(nameContainer);
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* Property is Multi section*/
        const multiContainer = mainDiv.createDiv();
        this.isMultiTogglerComponent = this.createTogglerContainer(multiContainer, "Is Multi: ");
        this.isMultiTogglerComponent.setValue(this.property.isMulti);
        this.isMultiTogglerComponent.setTooltip("Can this property have multiple values?");
        this.isMultiTogglerComponent.onChange(value => {
            this.property.isMulti = value;
            if (this.property.isCycle && this.property.isMulti) {
                this.property.isCycle = false;
                this.isCycleTogglerComponent.setValue(false);
            }
        });
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* Property is Cycle section*/
        const cycleContainer = mainDiv.createDiv();
        this.isCycleTogglerComponent = this.createTogglerContainer(cycleContainer, "Is Cycle: ");
        this.isCycleTogglerComponent.setValue(this.property.isCycle);
        this.isCycleTogglerComponent.setTooltip("Is this property's values set in cycle mode?");
        this.isCycleTogglerComponent.onChange(value => {
            this.property.isCycle = value;
            if (this.property.isCycle && this.property.isMulti) {
                this.property.isMulti = false;
                this.isMultiTogglerComponent.setValue(false);
            }
        });
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* Property's note for list of Values */
        const listNotePathContainer = mainDiv.createDiv();
        this.listNotePathComponent = this.createListNoteContainer(listNotePathContainer);
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* Property Values */
        const valuesList = mainDiv.createDiv();
        const valuesListHeader = valuesList.createDiv();
        valuesListHeader.createEl("h2");
        valuesListHeader.setText(`Preset values: ${Object.values(this.property.values).join(', ')}`);
        const valuesListBody = valuesList.createDiv();
        Object.keys(this.property.values).forEach(key => {
            this.valuesPromptComponents.push(this.createValueContainer(valuesListBody, valuesListHeader, key));
        });
        /* Add a new Values */
        const valuesListFooter = valuesList.createDiv();
        const addValue = valuesListFooter.createEl('button');
        addValue.type = 'button';
        addValue.textContent = 'Add';
        addValue.onClickEvent((evt) => {
            evt.preventDefault;
            this.property.insertNewValue("")
                .then(newKey => { this.createValueContainer(valuesListBody, valuesListHeader, newKey); });
        });
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* footer buttons*/
        const footerEl = this.contentEl.createDiv();
        const footerButtons = new obsidian.Setting(footerEl);
        footerButtons.addButton((b) => this.createSaveButton(b));
        footerButtons.addExtraButton((b) => this.createCancelButton(b));
    }
    createSaveButton(b) {
        b.setTooltip("Save")
            .setIcon("checkmark")
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            let error = false;
            if (/^[#>-]/.test(this.property.name)) {
                FieldSettingsModal.setValidationError(this.namePromptComponent, this.namePromptComponent.inputEl, "Property name cannot start with #, >, -");
                error = true;
            }
            if (this.property.name == "") {
                FieldSettingsModal.setValidationError(this.namePromptComponent, this.namePromptComponent.inputEl, "Property name can not be Empty");
                error = true;
            }
            this.valuesPromptComponents.forEach(input => {
                if (/^[#>-]/.test(input.inputEl.value)) {
                    FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot cannot start with #, >, -");
                    error = true;
                }
                if (/[,]/gu.test(input.inputEl.value)) {
                    FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot contain a comma");
                    error = true;
                }
                if (input.inputEl.value == "") {
                    FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values can't be null.");
                    error = true;
                }
            });
            if (error) {
                new obsidian.Notice("Fix errors before saving.");
                return;
            }
            this.saved = true;
            const currentExistingProperty = this.plugin.initialProperties.filter(p => p.id == this.property.id)[0];
            if (currentExistingProperty) {
                Field.copyProperty(currentExistingProperty, this.property);
            }
            else {
                this.plugin.initialProperties.push(this.property);
            }
            this.initialProperty = this.property;
            this.plugin.saveSettings();
            this.close();
        }));
        return b;
    }
    createCancelButton(b) {
        b.setIcon("cross")
            .setTooltip("Cancel")
            .onClick(() => {
            this.saved = false;
            /* reset values from settings */
            if (this.initialProperty.name != "") {
                Object.assign(this.property, this.initialProperty);
            }
            this.close();
        });
        return b;
    }
    /* utils functions */
    static setValidationError(textInput, insertAfter, message) {
        textInput.inputEl.addClass("is-invalid");
        if (message) {
            let mDiv = textInput.inputEl.parentElement.querySelector(".invalid-feedback");
            if (!mDiv) {
                mDiv = createDiv({ cls: "invalid-feedback" });
            }
            mDiv.innerText = message;
            mDiv.insertAfter(insertAfter);
        }
    }
    static removeValidationError(textInput) {
        if (textInput.inputEl.hasClass("is-invalid")) {
            textInput.inputEl.removeClass("is-invalid");
            textInput.inputEl.parentElement.removeChild(textInput.inputEl.parentElement.lastElementChild);
        }
    }
}

class SuperchargedLinksSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Supercharged Links.' });
        /* Managing extra attirbutes for a.internal-link */
        new obsidian.Setting(containerEl)
            .setName('Target Attributes for styling')
            .setDesc('Frontmatter attributes to target, comma separated')
            .addTextArea((text) => {
            text
                .setPlaceholder('Enter attributes as string, comma separated')
                .setValue(this.plugin.settings.targetAttributes.join(', '))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.targetAttributes = value.replace(/\s/g, '').split(',');
                yield this.plugin.saveSettings();
            }));
            text.inputEl.rows = 6;
            text.inputEl.cols = 25;
        });
        new obsidian.Setting(containerEl)
            .setName('Enable in Editor')
            .setDesc('If true, this will also supercharge internal links in the editor view of a note.')
            .addToggle(toggle => {
            toggle.setValue(this.plugin.settings.enableEditor);
            toggle.onChange(value => {
                this.plugin.settings.enableEditor = value;
                this.plugin.saveSettings();
            });
        });
        new obsidian.Setting(containerEl)
            .setName('Enable in File Browser')
            .setDesc('If true, this will also supercharge the file browser.')
            .addToggle(toggle => {
            toggle.setValue(this.plugin.settings.enableFileList);
            toggle.onChange(value => {
                this.plugin.settings.enableFileList = value;
                this.plugin.saveSettings();
            });
        });
        new obsidian.Setting(containerEl)
            .setName('Enable in Backlinks')
            .setDesc('If true, this will also supercharge the backlinks and forward links panels.')
            .addToggle(toggle => {
            toggle.setValue(this.plugin.settings.enableBacklinks);
            toggle.onChange(value => {
                this.plugin.settings.enableBacklinks = value;
                this.plugin.saveSettings();
            });
        });
        // Managing choice wether you want to parse tags both from normal tags and in the frontmatter
        new obsidian.Setting(containerEl)
            .setName('Parse all tags in the file')
            .setDesc('Sets the `data-link-tags`-attribute to look for tags both in the frontmatter and in the file as #tag-name')
            .addToggle(toggle => {
            toggle.setValue(this.plugin.settings.targetTags);
            toggle.onChange(value => {
                this.plugin.settings.targetTags = value;
                this.plugin.saveSettings();
            });
        });
        // Managing choice wether you get attributes from inline fields and frontmatter or only frontmater
        new obsidian.Setting(containerEl)
            .setName('Search for attribute in Inline fields like <field::>')
            .setDesc('Sets the `data-link-<field>`-attribute to the value of inline fields')
            .addToggle(toggle => {
            toggle.setValue(this.plugin.settings.getFromInlineField);
            toggle.onChange(value => {
                this.plugin.settings.getFromInlineField = value;
                this.plugin.saveSettings();
            });
        });
        /* Managing predefined values for properties */
        /* Manage menu options display*/
        new obsidian.Setting(containerEl)
            .setName("Display field options in context menu")
            .setDesc("Choose to show or hide fields options in the context menu of a link or a file")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.displayFieldsInContextMenu);
            toggle.onChange(value => {
                this.plugin.settings.displayFieldsInContextMenu = value;
                this.plugin.saveSettings();
            });
        });
        /* Exclude Fields from context menu*/
        new obsidian.Setting(containerEl)
            .setName('Ignored fields')
            .setDesc('Fields to be ignored by the plugin when adding options to the context menu')
            .addTextArea((text) => {
            text
                .setPlaceholder('Enter fields as string, comma separated')
                .setValue(this.plugin.settings.globallyIgnoredFields.join(', '))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.globallyIgnoredFields = value.replace(/\s/g, '').split(',');
                yield this.plugin.saveSettings();
            }));
            text.inputEl.rows = 6;
            text.inputEl.cols = 25;
        });
        /* Set classFiles Path*/
        new obsidian.Setting(containerEl)
            .setName('class Files path')
            .setDesc('Path to the files containing the authorized fields for a type of note')
            .addText((text) => {
            text
                .setPlaceholder('Path/')
                .setValue(this.plugin.settings.classFilesPath)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.classFilesPath = value;
                yield this.plugin.saveSettings();
            }));
        });
        /* Add new property for which we want to preset values*/
        new obsidian.Setting(containerEl)
            .setName("Add New Property Manager")
            .setDesc("Add a new Frontmatter property for which you want preset values.")
            .addButton((button) => {
            let b = button
                .setTooltip("Add New Property Manager")
                .setButtonText("+")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                let modal = new FieldSettingsModal(this.app, this.plugin, containerEl);
                modal.open();
            }));
            return b;
        });
        /* Managed properties that currently have preset values */
        this.plugin.initialProperties.forEach(prop => {
            const property = new Field();
            Object.assign(property, prop);
            new FieldSetting(containerEl, property, this.app, this.plugin);
        });
    }
}

function clearExtraAttributes(link) {
    Object.values(link.attributes).forEach(attr => {
        if (attr.name.startsWith("data-link")) {
            link.removeAttribute(attr.name);
        }
    });
}
function fetchFrontmatterTargetAttributes(app, settings, dest, addDataHref) {
    let new_props = {};
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        const cache = app.metadataCache.getFileCache(dest);
        if (!cache)
            return;
        const frontmatter = cache.frontmatter;
        if (frontmatter) {
            settings.targetAttributes.forEach(attribute => {
                if (Object.keys(frontmatter).includes(attribute)) {
                    new_props[attribute] = frontmatter[attribute];
                }
            });
        }
        if (settings.getFromInlineField) {
            const regex = new RegExp(`(${settings.targetAttributes.join("|")})::(.+)?`, "g");
            yield app.vault.cachedRead(dest).then((result) => {
                const matches = result.matchAll(regex);
                for (const match of matches) {
                    if (match[2] !== undefined) {
                        new_props[match[1]] = match[2].replace(/^\[(.*)\]$/, "$1").trim();
                    }
                }
            });
        }
        if (settings.targetTags) {
            new_props["tags"] = obsidian.getAllTags(cache).join(' ');
        }
        if (addDataHref) {
            new_props['data-href'] = dest.basename;
        }
        resolve(new_props);
    }));
}
function setLinkNewProps(link, new_props) {
    Object.keys(new_props).forEach(key => {
        link.setAttribute("data-link-" + key, new_props[key]);
    });
}
function updateLinkExtraAttributes(app, settings, link, destName) {
    const linkHref = link.getAttribute('href').split('#')[0];
    const dest = app.metadataCache.getFirstLinkpathDest(linkHref, destName);
    if (dest) {
        fetchFrontmatterTargetAttributes(app, settings, dest, false).then(new_props => setLinkNewProps(link, new_props));
    }
}
function updateDivExtraAttributes(app, settings, link, destName) {
    const linkName = link.textContent;
    const dest = app.metadataCache.getFirstLinkpathDest(linkName, destName);
    if (dest) {
        fetchFrontmatterTargetAttributes(app, settings, dest, true).then(new_props => setLinkNewProps(link, new_props));
    }
}
function updateEditLinkExtraAttributes(app, settings, link, destName) {
    const linkName = link.textContent.split('|')[0].split('#')[0];
    const dest = app.metadataCache.getFirstLinkpathDest(linkName, destName);
    if (dest) {
        fetchFrontmatterTargetAttributes(app, settings, dest, true).then(new_props => setLinkNewProps(link, new_props));
    }
}
function updateDivLinks(app, settings) {
    const divs = fishAll('div.internal-link');
    divs.push(...fishAll('td.internal-link'));
    divs.forEach((link) => {
        clearExtraAttributes(link);
        updateDivExtraAttributes(app, settings, link, "");
    });
    const fileDivs = fishAll('div.nav-file-title-content');
    fileDivs.forEach((link) => {
        clearExtraAttributes(link);
        if (settings.enableFileList) {
            updateDivExtraAttributes(app, settings, link, "");
        }
    });
}
function updateEditorLinks(app, settings) {
    const internalLinks = fishAll('span.cm-hmd-internal-link');
    internalLinks.forEach((link) => {
        clearExtraAttributes(link);
        updateEditLinkExtraAttributes(app, settings, link, "");
    });
}
function updateElLinks(app, settings, el, ctx) {
    const links = el.querySelectorAll('a.internal-link');
    const destName = ctx.sourcePath.replace(/(.*).md/, "$1");
    links.forEach((link) => {
        clearExtraAttributes(link);
        updateLinkExtraAttributes(app, settings, link, destName);
    });
}
function updateVisibleLinks(app, settings) {
    fishAll("a.internal-link").forEach(internalLink => clearExtraAttributes(internalLink));
    app.workspace.iterateRootLeaves((leaf) => {
        if (leaf.view instanceof obsidian.MarkdownView && leaf.view.file) {
            const file = leaf.view.file;
            const cachedFile = app.metadataCache.getFileCache(file);
            if (cachedFile.links) {
                cachedFile.links.forEach((link) => {
                    const fileName = file.path.replace(/(.*).md/, "$1");
                    const dest = app.metadataCache.getFirstLinkpathDest(link.link, fileName);
                    if (dest) {
                        fetchFrontmatterTargetAttributes(app, settings, dest, false).then(new_props => {
                            const internalLinks = leaf.view.containerEl.querySelectorAll(`a.internal-link[href="${link.link}"]`);
                            internalLinks.forEach((internalLink) => setLinkNewProps(internalLink, new_props));
                        });
                    }
                });
            }
        }
    });
}

const DEFAULT_SETTINGS = {
    targetAttributes: [],
    targetTags: true,
    presetFields: [],
    displayFieldsInContextMenu: true,
    globallyIgnoredFields: [],
    classFilesPath: "",
    getFromInlineField: true,
    enableEditor: true,
    enableFileList: true,
    enableBacklinks: true
};

function replaceValues(app, file, attribute, input) {
    return __awaiter(this, void 0, void 0, function* () {
        app.vault.read(file).then((result) => {
            let newContent = [];
            let foreHeadText = false;
            let frontmatterStart = false;
            let frontmatterEnd = false;
            let inFrontmatter = false;
            result.split('\n').map(line => {
                if (line != "---" && !foreHeadText && !frontmatterStart) {
                    foreHeadText = true;
                }
                if (line == "---" && !foreHeadText) {
                    if (!frontmatterStart) {
                        frontmatterStart = true;
                        inFrontmatter = true;
                    }
                    else if (!frontmatterEnd) {
                        frontmatterEnd = true;
                        inFrontmatter = false;
                    }
                }
                if (inFrontmatter) {
                    const regex = new RegExp(`${attribute}:`, 'u');
                    const regexResult = line.match(regex);
                    if (regexResult && regexResult.length > 0) {
                        const inputArray = input ? input.replace(/(\,\s+)/g, ',').split(',') : [""];
                        const newValue = inputArray.length == 1 ? inputArray[0] : `[${inputArray.join(', ')}]`;
                        newContent.push(`${attribute}: ${newValue}`);
                    }
                    else {
                        newContent.push(`${line}`);
                    }
                }
                else {
                    const regex = new RegExp(`([_\*~\`]*)${attribute}([_\*~\`]*)(\\s*)::`, 'u');
                    const r = line.match(regex);
                    if (r && r.length > 0) {
                        const inputArray = input ? input.replace(/(\,\s+)/g, ',').split(',') : [""];
                        const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(', ')}`;
                        newContent.push(`${r[1]}${attribute}${r[2]}${r[3]}:: ${newValue}`);
                    }
                    else {
                        newContent.push(line);
                    }
                }
            });
            app.vault.modify(file, newContent.join('\n'));
        });
    });
}

class valueMultiSelectModal extends obsidian.Modal {
    constructor(app, file, name, initialValues, settings, lineNumber = -1, inFrontMatter = false, top = false) {
        super(app);
        this.app = app;
        this.file = file;
        this.name = name;
        this.settings = settings;
        this.values = initialValues ? initialValues.toString().replace(/^\[(.*)\]$/, "$1").split(",").map(item => item.trim()) : [];
        this.lineNumber = lineNumber;
        this.inFrontmatter = inFrontMatter;
        this.top = top;
    }
    onOpen() {
        const valueGrid = this.contentEl.createDiv({
            cls: "frontmatter-values-grid"
        });
        FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app).then(listNoteValues => {
            this.populateValuesGrid(valueGrid, listNoteValues);
        });
    }
    buildValueToggler(valueGrid, presetValue) {
        const valueSelectorContainer = valueGrid.createDiv({
            cls: "frontmatter-value-selector-container"
        });
        const valueTogglerContainer = valueSelectorContainer.createDiv({
            cls: "frontmatter-value-selector-toggler"
        });
        const valueToggler = new obsidian.ToggleComponent(valueTogglerContainer);
        this.values.forEach(value => {
            if (value == presetValue) {
                valueToggler.setValue(true);
            }
        });
        valueToggler.onChange(value => {
            if (value && !this.values.includes(presetValue)) {
                this.values.push(presetValue);
            }
            if (!value) {
                this.values.remove(presetValue);
            }
        });
        const valueLabel = valueSelectorContainer.createDiv({
            cls: "frontmatter-value-selector-label"
        });
        valueLabel.setText(presetValue);
    }
    populateValuesGrid(valueGrid, listNoteValues) {
        Object.keys(this.settings.values).forEach(key => {
            const presetValue = this.settings.values[key];
            this.buildValueToggler(valueGrid, presetValue);
        });
        listNoteValues.forEach(value => {
            this.buildValueToggler(valueGrid, value);
        });
        const footer = this.contentEl.createDiv({
            cls: "frontmatter-value-grid-footer"
        });
        const saveButton = new obsidian.ButtonComponent(footer);
        saveButton.setIcon("checkmark");
        saveButton.onClick(() => {
            if (this.lineNumber == -1) {
                replaceValues(this.app, this.file, this.name, this.values.join(","));
            }
            else {
                this.app.vault.read(this.file).then(result => {
                    let newContent = [];
                    if (this.top) {
                        newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${this.values.join(",")}`);
                        result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
                    }
                    else {
                        result.split("\n").forEach((line, _lineNumber) => {
                            newContent.push(line);
                            if (_lineNumber == this.lineNumber) {
                                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${this.values.join(",")}`);
                            }
                        });
                    }
                    this.app.vault.modify(this.file, newContent.join('\n'));
                    this.close();
                });
            }
            this.close();
        });
        const cancelButton = new obsidian.ExtraButtonComponent(footer);
        cancelButton.setIcon("cross");
        cancelButton.onClick(() => this.close());
    }
}

class valueTextInputModal extends obsidian.Modal {
    constructor(app, file, name, value, lineNumber = -1, inFrontMatter = false, top = false) {
        super(app);
        this.app = app;
        this.file = file;
        this.name = name;
        this.value = value;
        this.lineNumber = lineNumber;
        this.inFrontmatter = inFrontMatter;
        this.top = top;
    }
    onOpen() {
        const inputDiv = this.contentEl.createDiv({
            cls: "frontmatter-modal-value"
        });
        this.buildInputEl(inputDiv);
    }
    buildInputEl(inputDiv) {
        const form = inputDiv.createEl("form");
        form.type = "submit";
        form.onsubmit = (e) => {
            e.preventDefault();
            if (this.lineNumber == -1) {
                replaceValues(this.app, this.file, this.name, inputEl.getValue());
            }
            else {
                this.app.vault.read(this.file).then(result => {
                    let newContent = [];
                    if (this.top) {
                        newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${inputEl.getValue()}`);
                        result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
                    }
                    else {
                        result.split("\n").forEach((line, _lineNumber) => {
                            newContent.push(line);
                            if (_lineNumber == this.lineNumber) {
                                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${inputEl.getValue()}`);
                            }
                        });
                    }
                    this.app.vault.modify(this.file, newContent.join('\n'));
                    this.close();
                });
            }
            this.close();
        };
        const inputEl = new obsidian.TextComponent(form);
        inputEl.inputEl.focus();
        inputEl.setValue(this.value);
        inputEl.inputEl.addClass("frontmatter-prompt-input");
    }
}

class valueToggleModal$1 extends obsidian.Modal {
    constructor(app, file, name, value) {
        super(app);
        this.app = app;
        this.file = file;
        this.name = name;
        this.value = value;
    }
    onOpen() {
        const inputDiv = this.contentEl.createDiv({
            cls: "frontmatter-toggler"
        });
        this.buildInputEl(inputDiv);
    }
    buildInputEl(inputDiv) {
        const inputEl = new obsidian.ToggleComponent(inputDiv);
        inputEl.setValue(this.value);
        inputEl.onChange(v => {
            replaceValues(this.app, this.file, this.name, v ? "true" : "false");
        });
    }
}

class valueToggleModal extends obsidian.Modal {
    constructor(app, file, name, value, settings, lineNumber = -1, inFrontMatter = false, top = false) {
        super(app);
        this.app = app;
        this.file = file;
        this.name = name;
        this.value = value;
        this.settings = settings;
        this.newValue = null;
        this.lineNumber = lineNumber;
        this.inFrontmatter = inFrontMatter;
        this.top = top;
    }
    onOpen() {
        const inputDiv = this.contentEl.createDiv({
            cls: "frontmatter-modal-value"
        });
        this.buildInputEl(inputDiv);
    }
    buildInputEl(inputDiv) {
        const selectEl = new obsidian.DropdownComponent(inputDiv);
        selectEl.selectEl.addClass("frontmatter-select");
        const values = this.settings.values;
        selectEl.addOption("", "--Empty--");
        Object.keys(values).forEach(key => {
            selectEl.addOption(values[key], values[key]);
        });
        if (Object.values(values).includes(this.value)) {
            selectEl.setValue(this.value);
        }
        FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app).then(listNoteValues => {
            listNoteValues.forEach(value => selectEl.addOption(value, value));
            if (listNoteValues.includes(this.value)) {
                selectEl.setValue(this.value);
            }
            selectEl.onChange(value => this.newValue = value != "--Empty--" ? value : "");
            const submitButton = new obsidian.ButtonComponent(inputDiv);
            submitButton.setTooltip("Save")
                .setIcon("checkmark")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                if (this.lineNumber == -1) {
                    if (this.newValue || this.newValue == "") {
                        replaceValues(this.app, this.file, this.name, this.newValue);
                    }
                }
                else {
                    this.app.vault.read(this.file).then(result => {
                        let newContent = [];
                        if (this.top) {
                            newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
                            result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
                        }
                        else {
                            result.split("\n").forEach((line, _lineNumber) => {
                                newContent.push(line);
                                if (_lineNumber == this.lineNumber) {
                                    newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
                                }
                            });
                        }
                        this.app.vault.modify(this.file, newContent.join('\n'));
                        this.close();
                    });
                }
                this.close();
            }));
        });
    }
}

class addNewFieldModal extends obsidian.Modal {
    constructor(plugin, lineNumber, file, inFrontmatter, top) {
        super(plugin.app);
        this.lineNumber = lineNumber;
        this.inFrontmatter = inFrontmatter;
        this.file = file;
        this.top = top;
    }
    onOpen() {
        this.titleEl.setText("Insert new field");
        const addNewFieldContainer = this.contentEl.createDiv();
        const nameInputContainer = addNewFieldContainer.createDiv();
        nameInputContainer.setText("Field Name: ");
        const nameInputEl = new obsidian.TextComponent(nameInputContainer);
        nameInputEl.setPlaceholder("Field name");
        const valueInputContainer = addNewFieldContainer.createDiv();
        valueInputContainer.setText("Field value: ");
        const valueInputEl = new obsidian.TextComponent(valueInputContainer);
        valueInputEl.setPlaceholder("Field value");
        const footerButtons = this.contentEl.createDiv({
            cls: 'frontmatter-textarea-buttons'
        });
        const saveButton = new obsidian.ButtonComponent(footerButtons);
        saveButton.setIcon("checkmark");
        saveButton.onClick(() => {
            this.app.vault.read(this.file).then(result => {
                let newContent = [];
                if (this.top) {
                    newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
                    result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
                }
                else {
                    result.split("\n").forEach((line, _lineNumber) => {
                        newContent.push(line);
                        if (_lineNumber == this.lineNumber) {
                            newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
                        }
                    });
                }
                this.app.vault.modify(this.file, newContent.join('\n'));
                this.close();
            });
        });
        const cancelButton = new obsidian.ExtraButtonComponent(footerButtons);
        cancelButton.setIcon("cross");
        cancelButton.onClick(() => {
            this.close();
        });
    }
}

class fieldSelectModal extends obsidian.Modal {
    constructor(plugin, file, lineNumber, line, inFrontmatter, top) {
        super(plugin.app);
        this.line = line;
        this.lineNumber = lineNumber;
        this.plugin = plugin;
        this.file = file;
        this.inFrontmatter = inFrontmatter;
        this.top = top;
    }
    onOpen() {
        this.titleEl.setText(`Insert field after > ${this.line.substring(0, 20)}${this.line.length > 20 ? "..." : ""}`);
        const container = this.contentEl.createDiv();
        const settingsDropdownContainer = container.createDiv();
        const settingsSelector = new obsidian.DropdownComponent(settingsDropdownContainer);
        settingsSelector.addOption("---", "Choose Field");
        settingsSelector.addOption("++New", "New");
        this.plugin.settings.presetFields.forEach(setting => {
            settingsSelector.addOption(setting.name, setting.name);
        });
        settingsSelector.onChange(value => {
            if (value == "++New") {
                const newFieldModal = new addNewFieldModal(this.plugin, this.lineNumber, this.file, this.inFrontmatter, this.top);
                newFieldModal.open();
                this.close();
            }
            else {
                const field = this.plugin.settings.presetFields.filter(_field => _field.name == value)[0];
                if (field.valuesListNotePath || (field.values && Object.keys(field.values).length > 0)) {
                    if (field.isMulti) {
                        const fieldModal = new valueMultiSelectModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
                        fieldModal.titleEl.setText(`Select values for ${value}`);
                        fieldModal.open();
                    }
                    else {
                        const fieldModal = new valueToggleModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
                        fieldModal.titleEl.setText(`Select value for ${value}`);
                        fieldModal.open();
                    }
                }
                else {
                    const fieldModal = new valueTextInputModal(this.app, this.file, value, "", this.lineNumber, this.inFrontmatter, this.top);
                    fieldModal.titleEl.setText(`Enter value for ${value}`);
                    fieldModal.open();
                }
                this.close();
            }
        });
    }
}

class chooseSectionModal extends obsidian.Modal {
    constructor(plugin, file) {
        super(plugin.app);
        this.file = file;
        this.plugin = plugin;
    }
    onOpen() {
        this.titleEl.setText("Add a field in this note after:");
        const inputDiv = this.contentEl.createDiv({
            cls: "frontmatter-modal-value"
        });
        const selectEl = new obsidian.DropdownComponent(inputDiv);
        selectEl.selectEl.addClass("frontmatter-select");
        selectEl.addOption("", "Select line");
        selectEl.addOption("top_0", "top");
        this.app.vault.read(this.file).then(result => {
            let foreHeadText = false;
            let frontmatterStart = false;
            let frontmatterEnd = false;
            let inFrontmatter = false;
            result.split("\n").forEach((line, lineNumber) => {
                if (line != "---" && !foreHeadText && !frontmatterStart) {
                    foreHeadText = true;
                }
                if (line == "---" && !foreHeadText) {
                    if (!frontmatterStart) {
                        frontmatterStart = true;
                        inFrontmatter = true;
                    }
                    else if (!frontmatterEnd) {
                        frontmatterEnd = true;
                        inFrontmatter = false;
                    }
                }
                if (inFrontmatter) {
                    selectEl.addOption(`frontmatter_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
                }
                else {
                    selectEl.addOption(`body_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
                }
            });
            selectEl.onChange(value => {
                const valueArray = selectEl.getValue().match(/(\w+)_(\d+)/);
                const position = valueArray[1];
                const lineNumber = Number(valueArray[2]);
                const inFrontmatter = position == "frontmatter" ? true : false;
                const top = position == "top" ? true : false;
                const modal = new fieldSelectModal(this.plugin, this.file, lineNumber, result.split('\n')[lineNumber], inFrontmatter, top);
                this.close();
                modal.open();
            });
        });
    }
}

const types = {
    "input": "Accepts any value",
    "select": "Accepts a single value from a list",
    "multi": "Accepts multiple values from a list",
    "cycle": "Cycle through values from a list"
};
class FileClassAttribute {
    constructor(raw) {
        const completeRegex = new RegExp(/^[_\*~`]*([0-9\w\p{Letter}\p{Emoji_Presentation}][-0-9\w\p{Letter}\p{Emoji_Presentation}\s]*)[_\*~`]*\s*::(.+)?/u);
        const nameRegex = new RegExp(/^[_\*~`]*([0-9\w\p{Letter}\p{Emoji_Presentation}][-0-9\w\p{Letter}\p{Emoji_Presentation}\s]*)[_\*~`]*\s*$/u);
        const detailedFieldRaw = raw.match(completeRegex);
        const simpleFieldRaw = raw.match(nameRegex);
        if (detailedFieldRaw) {
            this.name = detailedFieldRaw[1].trim();
            const settings = JSON.parse(`${detailedFieldRaw[2].trim()}`);
            this.type = settings['type'];
            switch (this.type) {
                case "multi":
                    this.isMulti = true;
                    break;
                case "cycle":
                    this.isCycle = true;
                    break;
            }
            this.options = settings['options'];
        }
        else if (simpleFieldRaw) {
            this.name = simpleFieldRaw[0].trim();
        }
        else {
            const error = new Error("Improper value");
            throw error;
        }
    }
    getField() {
        let values = {};
        this.options.forEach((option, index) => {
            values[index] = option;
        });
        return new Field(this.name, values, this.name, this.isMulti, this.isCycle);
    }
}

class FileClassManager {
    constructor(instance) {
        this.instance = instance;
    }
    all() {
        const filesWithFileClassName = this.instance.plugin.app.vault.getMarkdownFiles().filter(file => {
            const cache = this.instance.plugin.app.metadataCache.getFileCache(file);
            return cache.frontmatter
                && Object.keys(cache.frontmatter).includes('fileClass')
                && cache.frontmatter['fileClass'] == this.instance.name;
        });
        return filesWithFileClassName;
    }
    get(name) {
        const filesWithName = this.all().filter(file => file.basename == name);
        if (filesWithName.length > 1) {
            const error = new Error("More than one value found");
            throw error;
        }
        if (filesWithName.length == 0) {
            const error = new Error("No file value found");
            throw error;
        }
        return filesWithName[0];
    }
    getPath(path) {
        const filesWithName = this.all().filter(file => file.path == path);
        if (filesWithName.length > 1) {
            const error = new Error("More than one value found");
            throw error;
        }
        if (filesWithName.length == 0) {
            const error = new Error("No file value found");
            throw error;
        }
        return filesWithName[0];
    }
}
class FileClass {
    constructor(plugin, name) {
        this.plugin = plugin;
        this.name = name,
            this.objects = new FileClassManager(this);
        this.attributes = [];
    }
    getClassFile() {
        const filesClassPath = this.plugin.settings.classFilesPath;
        const files = this.plugin.app.vault.getMarkdownFiles().filter(file => file.path == `${filesClassPath}${this.name}.md`);
        if (files.length == 0) {
            const error = new Error("no such fileClass in fileClass folder");
            throw error;
        }
        else {
            return files[0];
        }
    }
    getAttributes() {
        return new Promise((resolve, reject) => {
            try {
                const file = this.getClassFile();
                let attributes = [];
                let errors = [];
                this.plugin.app.vault.read(file).then(result => {
                    result.split('\n').forEach(line => {
                        try {
                            const attribute = new FileClassAttribute(line);
                            attributes.push(attribute);
                        }
                        catch (error) {
                            errors.push(error);
                        }
                    });
                    this.attributes = attributes;
                    this.errors = errors;
                    resolve();
                });
            }
            catch (error) {
                reject(error);
            }
        });
    }
    updateAttribute(newType, newOptions, newName, attr) {
        return new Promise((resolve, reject) => {
            const file = this.getClassFile();
            this.plugin.app.vault.read(file).then(result => {
                if (attr) {
                    let newContent = [];
                    result.split('\n').forEach(line => {
                        if (line.startsWith(attr.name)) {
                            if (newType == "input") {
                                newContent.push(newName);
                            }
                            else {
                                let settings = {};
                                settings["type"] = newType;
                                settings["options"] = newOptions;
                                newContent.push(`${newName}:: ${JSON.stringify(settings)}`);
                            }
                        }
                        else {
                            newContent.push(line);
                        }
                    });
                    this.plugin.app.vault.modify(file, newContent.join('\n'));
                }
                else {
                    let settings = {};
                    settings["type"] = newType;
                    settings["options"] = newOptions;
                    result += (`\n${newName}:: ${JSON.stringify(settings)}`);
                    this.plugin.app.vault.modify(file, result);
                }
                resolve();
            });
        });
    }
    removeAttribute(attr) {
        return new Promise((resolve, reject) => {
            const file = this.getClassFile();
            this.plugin.app.vault.read(file).then(result => {
                let newContent = [];
                result.split('\n').forEach(line => {
                    if (!line.startsWith(attr.name)) {
                        newContent.push(line);
                    }
                });
                this.plugin.app.vault.modify(file, newContent.join('\n'));
                resolve();
            });
        });
    }
}
function createFileClass(plugin, name) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const fileClass = new FileClass(plugin, name);
            fileClass.getAttributes().then(() => {
                resolve(fileClass);
            }).catch((error) => {
                reject(error);
            });
        });
    });
}

class FileClassAttributeModal extends obsidian.Modal {
    constructor(app, fileClass, attr) {
        super(app);
        this.type = "input";
        this.options = [];
        this.name = "";
        this.attr = attr;
        this.fileClass = fileClass;
        if (this.attr) {
            this.type = this.attr.type || "input";
            this.options = this.attr.options;
            this.name = this.attr.name;
        }
    }
    onOpen() {
        //title
        this.titleEl.setText(this.attr ? `Manage ${this.attr.name}` : `Create a new attribute for ${this.fileClass.name}`);
        //name input
        const nameInputContainer = this.contentEl.createDiv();
        nameInputContainer.setText("name");
        const nameInput = new obsidian.TextComponent(nameInputContainer);
        this.attr ? nameInput.setValue(this.attr.name) : nameInput.setPlaceholder("Type a name for this attribute");
        //header for select
        const typeSelectHeader = this.contentEl.createDiv();
        const attrLine = typeSelectHeader.createEl("div");
        const attrName = attrLine.createEl("strong");
        attrName.setText(`<${this.name}>`);
        attrLine.append(" fields in files with:");
        String(`---\nfileClass: ${this.fileClass.name}\n...\n---`).split('\n').forEach(line => {
            typeSelectHeader.createEl("div", "yaml-frontmatter-red").setText(line);
        });
        // type select
        const typeSelectContainer = this.contentEl.createDiv({ cls: 'frontmatter-value-selector-container' });
        const typeSelectLabel = typeSelectContainer.createDiv({ cls: 'frontmatter-value-selector-inline-label' });
        typeSelectLabel.setText("will: ");
        const typeSelectDropDown = typeSelectContainer.createDiv({ cls: 'frontmatter-value-selector-toggler' });
        const typeSelect = new obsidian.DropdownComponent(typeSelectDropDown);
        Object.keys(types).forEach(key => {
            typeSelect.addOption(key, types[key]);
        });
        if (this.attr) {
            typeSelect.setValue(this.type);
        }
        // options input
        const optionsInputContainer = this.contentEl.createDiv({ cls: 'frontmatter-value-selector-container' });
        const optionsInputLabel = optionsInputContainer.createDiv({ cls: 'frontmatter-value-selector-inline-label-top' });
        optionsInputLabel.setText("Values");
        const optionsInput = new obsidian.TextAreaComponent(optionsInputContainer);
        optionsInput.inputEl.rows = 3;
        optionsInput.inputEl.cols = 26;
        this.attr ? optionsInput.setValue(this.type == "input" ? "" : this.options.join(", ")) : optionsInput.setPlaceholder("insert values, comma separated");
        !this.attr || this.type == "input" ? optionsInputContainer.hide() : optionsInputContainer.show();
        // event handlers
        typeSelect.onChange(type => {
            type == "input" ? optionsInputContainer.hide() : optionsInputContainer.show();
            this.type = type;
        });
        optionsInput.onChange(value => this.options = value.split(",").map(item => item.trim()));
        nameInput.onChange(value => { this.name = value; attrName.setText(`<${value}>`); });
        // footer buttons
        const footer = this.contentEl.createDiv({ cls: "frontmatter-value-grid-footer" });
        const saveButton = new obsidian.ButtonComponent(footer);
        saveButton.setIcon("checkmark");
        saveButton.onClick(() => {
            this.fileClass.updateAttribute(this.type, this.options, this.name, this.attr);
            this.close();
        });
        if (this.attr) {
            const removeButton = new obsidian.ButtonComponent(footer);
            removeButton.setIcon("trash");
            removeButton.onClick(() => {
                const confirmModal = new obsidian.Modal(this.app);
                confirmModal.titleEl.setText("Please confirm");
                confirmModal.contentEl.createDiv().setText(`Do you really want to remove ${this.attr.name} attribute from ${this.fileClass.name}?`);
                const confirmFooter = confirmModal.contentEl.createDiv({ cls: "frontmatter-value-grid-footer" });
                const confirmButton = new obsidian.ButtonComponent(confirmFooter);
                confirmButton.setIcon("checkmark");
                confirmButton.onClick(() => {
                    this.fileClass.removeAttribute(this.attr);
                    confirmModal.close();
                    this.close();
                });
                const dismissButton = new obsidian.ExtraButtonComponent(confirmFooter);
                dismissButton.setIcon("cross");
                dismissButton.onClick(() => this.close());
                confirmModal.open();
            });
        }
        const cancelButton = new obsidian.ExtraButtonComponent(footer);
        cancelButton.setIcon("cross");
        cancelButton.onClick(() => this.close());
    }
}

class FileClassAttributeSelectModal extends obsidian.Modal {
    constructor(plugin, file) {
        super(plugin.app);
        this.file = file;
        this.plugin = plugin;
    }
    onOpen() {
        this.titleEl.setText(`Select the field to update`);
        createFileClass(this.plugin, this.file.basename).then(fileClass => {
            this.titleEl.setText(`Select the field to update in ${fileClass.name}`);
            const selectContainer = this.contentEl.createDiv();
            const select = new obsidian.DropdownComponent(selectContainer);
            select.addOption("select an attribute", "--select an attribute--");
            fileClass.attributes.forEach(attr => {
                select.addOption(attr.name, attr.name);
            });
            select.addOption("++newAttr++", "++Add a new attribute++");
            select.onChange((attrName) => {
                if (attrName == "++newAttr") {
                    const modal = new FileClassAttributeModal(this.plugin.app, fileClass);
                    modal.open();
                    this.close();
                }
                else {
                    const modal = new FileClassAttributeModal(this.plugin.app, fileClass, fileClass.attributes.filter(attr => attr.name == attrName)[0]);
                    modal.open();
                    this.close();
                }
            });
        });
    }
}

function isMenu(category) {
    return category.addItem !== undefined;
}
function isSelect(category) {
    return category.modals !== undefined;
}
class OptionsList {
    constructor(plugin, file, category) {
        this.file = file;
        this.plugin = plugin;
        this.category = category;
    }
    createExtraOptionList() {
        const cache = this.plugin.app.metadataCache.getCache(this.file.path);
        if (cache.frontmatter) {
            const _a = cache.frontmatter, attributes = __rest(_a, ["position"]);
            Object.keys(attributes).forEach(key => {
                if (this.plugin.settings.globallyIgnoredFields.includes(key)) {
                    delete attributes[key];
                }
            });
            if (isMenu(this.category)) {
                this.category.addSeparator();
            }
            let fileClassForFields = false;
            let fileClassFields = [];
            if (Object.keys(attributes).includes('fileClass')) {
                const fileClass = attributes['fileClass'];
                createFileClass(this.plugin, fileClass).then(fileClass => {
                    this.fileClass = fileClass;
                    fileClassFields = fileClass.attributes.map(attr => attr.name);
                    fileClassForFields = true;
                    Object.keys(attributes).forEach(key => {
                        if (!fileClassFields.includes(key) && key != 'fileClass') {
                            delete attributes[key];
                        }
                    });
                    const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, this.fileClass.getClassFile());
                    if (isMenu(this.category)) {
                        this.category.addSeparator();
                        this.category.addItem((item) => {
                            item.setIcon("gear");
                            item.setTitle(`Manage <${this.fileClass.name}> fields`);
                            item.onClick((evt) => {
                                fileClassAttributeSelectModal.open();
                            });
                        });
                    }
                    else {
                        this.category.addOption("manage_fileClass_attributes", "Manage fileClass attributes");
                        this.category.modals["add_field_at_section"] = () => fileClassAttributeSelectModal.open();
                    }
                    this.createExtraOptionsListForFrontmatter(attributes).then(() => {
                        this.createExtraOptionsListForInlineFields(this.file, fileClassForFields, fileClassFields).then(() => {
                            if (isMenu(this.category)) {
                                this.category.addSeparator();
                            }
                            this.addSectionSelectModalOption(this.plugin);
                        });
                    });
                }).catch((error) => {
                    this.createExtraOptionsListForFrontmatter(attributes).then(() => {
                        this.createExtraOptionsListForInlineFields(this.file).then(() => {
                            if (isMenu(this.category)) {
                                this.category.addSeparator();
                            }
                            this.addSectionSelectModalOption(this.plugin);
                        });
                    });
                });
            }
            else {
                this.createExtraOptionsListForFrontmatter(attributes).then(() => {
                    this.createExtraOptionsListForInlineFields(this.file).then(() => {
                        if (isMenu(this.category)) {
                            this.category.addSeparator();
                        }
                        this.addSectionSelectModalOption(this.plugin);
                    });
                });
            }
        }
        else {
            this.createExtraOptionsListForInlineFields(this.file).then(() => {
                if (isMenu(this.category)) {
                    this.category.addSeparator();
                }
                this.addSectionSelectModalOption(this.plugin);
            });
        }
    }
    createExtraOptionsListForInlineFields(file, fileClassForFields = false, fileClassFields = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let attributes = {};
                const regex = new RegExp(/[_\*~`]*([0-9\w\p{Letter}\p{Emoji_Presentation}][-0-9\w\p{Letter}\p{Emoji_Presentation}\s]*)[_\*~`]*\s*::(.+)?/u);
                this.plugin.app.vault.read(file).then((result) => {
                    result.split('\n').map(line => {
                        const regexResult = line.match(regex);
                        if (regexResult
                            && regexResult.length > 0
                            && !this.plugin.settings.globallyIgnoredFields.includes(regexResult[1].trim())) {
                            if (fileClassForFields) {
                                if (fileClassFields.includes(regexResult[1].trim())) {
                                    attributes[regexResult[1].trim()] = regexResult.length > 1 && regexResult[2] ? regexResult[2].trim() : "";
                                }
                            }
                            else {
                                attributes[regexResult[1].trim()] = regexResult.length > 1 && regexResult[2] ? regexResult[2].trim() : "";
                            }
                        }
                    });
                    if (Object.keys(attributes).length > 0) {
                        if (isMenu(this.category)) {
                            this.category.addSeparator();
                        }
                        this.buildExtraOptionsList(attributes);
                    }
                    resolve();
                });
            });
        });
    }
    createExtraOptionsListForFrontmatter(attributes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.buildExtraOptionsList(attributes);
        });
    }
    buildExtraOptionsList(attributes) {
        Object.keys(attributes).forEach((key) => {
            const value = attributes[key];
            const propertySettings = this.getPropertySettings(key);
            if (propertySettings && propertySettings.values) {
                if (propertySettings.isCycle) {
                    this.addCycleMenuOption(key, value, propertySettings);
                }
                else if (propertySettings.isMulti) {
                    this.addMultiMenuOption(key, value, propertySettings);
                }
                else {
                    this.addSelectMenuOption(key, value, propertySettings);
                }
            }
            else if (isBoolean(value) || /true/i.test(value) || /false/i.test(value)) {
                let toBooleanValue;
                if (isBoolean(value)) {
                    toBooleanValue = value;
                }
                else if (/true/i.test(value)) {
                    toBooleanValue = true;
                }
                else if (/false/i.test(value)) {
                    toBooleanValue = false;
                }
                this.addToggleMenuOption(key, toBooleanValue);
            }
            else {
                this.addTextInputMenuOption(key, value ? value.toString() : "");
            }
        });
    }
    addSectionSelectModalOption(plugin) {
        const modal = new chooseSectionModal(this.plugin, this.file);
        if (isMenu(this.category)) {
            this.category.addItem((item) => {
                item.setIcon("pencil");
                item.setTitle("Add field at section...");
                item.onClick((evt) => {
                    modal.open();
                });
            });
        }
        else if (isSelect(this.category)) {
            this.category.addOption("add_field_at_section", "Add field at section...");
            this.category.modals["add_field_at_section"] = () => modal.open();
        }
    }
    addCycleMenuOption(name, value, propertySettings) {
        const values = propertySettings.values;
        const keys = Object.keys(values);
        const keyForValue = keys.find(key => values[key] === value);
        let nextValue;
        if (keyForValue) {
            const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
            nextValue = values[nextKey];
        }
        else {
            nextValue = values[Object.keys(values)[0]];
        }
        if (isMenu(this.category)) {
            this.category.addItem((item) => {
                item.setTitle(`${name} : ${value} ▷ ${nextValue}`);
                item.setIcon('switch');
                item.onClick((evt) => {
                    replaceValues(this.plugin.app, this.file, name, nextValue);
                });
            });
        }
        else if (isSelect(this.category)) {
            this.category.addOption(`${name}_${value}_${nextValue}`, `${name} : ${value} ▷ ${nextValue}`);
            this.category.modals[`${name}_${value}_${nextValue}`] = () => replaceValues(this.plugin.app, this.file, name, nextValue);
        }
    }
    addMultiMenuOption(name, value, propertySettings) {
        const modal = new valueMultiSelectModal(this.plugin.app, this.file, name, value, propertySettings);
        modal.titleEl.setText("Select values");
        if (isMenu(this.category)) {
            this.category.addItem((item) => {
                item.setTitle(`Update <${name}>`);
                item.setIcon('bullet-list');
                item.onClick((evt) => {
                    modal.open();
                });
            });
        }
        else if (isSelect(this.category)) {
            this.category.addOption(`update_${name}`, `Update <${name}>`);
            this.category.modals[`update_${name}`] = () => modal.open();
        }
    }
    addSelectMenuOption(name, value, propertySettings) {
        const modal = new valueToggleModal(this.plugin.app, this.file, name, value, propertySettings);
        modal.titleEl.setText("Select value");
        if (isMenu(this.category)) {
            this.category.addItem((item) => {
                item.setTitle(`Update ${name}`);
                item.setIcon('right-triangle');
                item.onClick((evt) => modal.open());
            });
        }
        else if (isSelect(this.category)) {
            this.category.addOption(`update_${name}`, `Update <${name}>`);
            this.category.modals[`update_${name}`] = () => modal.open();
        }
    }
    addToggleMenuOption(name, value) {
        const modal = new valueToggleModal$1(this.plugin.app, this.file, name, value);
        modal.titleEl.setText(`Change Value for <${name}>`);
        if (isMenu(this.category)) {
            this.category.addItem((item) => {
                item.setTitle(`Update <${name}>`);
                item.setIcon('checkmark');
                item.onClick((evt) => { modal.open(); });
            });
        }
        else if (isSelect(this.category)) {
            this.category.addOption(`update_${name}`, `Update <${name}>`);
            this.category.modals[`update_${name}`] = () => modal.open();
        }
    }
    addTextInputMenuOption(name, value) {
        const modal = new valueTextInputModal(this.plugin.app, this.file, name, value);
        modal.titleEl.setText(`Change Value for <${name}>`);
        if (isMenu(this.category)) {
            this.category.addItem((item) => {
                item.setTitle(`Update <${name}>`);
                item.setIcon('pencil');
                item.onClick((evt) => modal.open());
            });
        }
        else if (isSelect(this.category)) {
            this.category.addOption(`update_${name}`, `Update <${name}>`);
            this.category.modals[`update_${name}`] = () => modal.open();
        }
    }
    getPropertySettings(propertyName) {
        const matchingSettings = this.plugin.settings.presetFields.filter(p => p.name == propertyName);
        if (this.fileClass) {
            const fileClassAttributesWithName = this.fileClass.attributes.filter(attr => attr.name == propertyName);
            if (fileClassAttributesWithName.length > 0) {
                const fileClassAttribute = fileClassAttributesWithName[0];
                if (fileClassAttribute.options) {
                    return fileClassAttribute.getField();
                }
                else if (matchingSettings.length > 0) {
                    return matchingSettings[0];
                }
            }
        }
        else if (matchingSettings.length > 0) {
            return matchingSettings[0];
        }
    }
}

class linkContextMenu {
    constructor(plugin) {
        this.plugin = plugin;
        this.createContextMenu();
    }
    createContextMenu() {
        this.plugin.registerEvent(this.plugin.app.workspace.on('file-menu', (menu, abstractFile, source) => {
            if (this.plugin.settings.displayFieldsInContextMenu && (source === "link-context-menu" ||
                source === "calendar-context-menu" ||
                source === 'pane-more-options' ||
                source === 'file-explorer-context-menu')) {
                const files = this.plugin.app.vault.getMarkdownFiles().filter(mdFile => mdFile.path == abstractFile.path);
                if (files.length > 0) {
                    const file = files[0];
                    this.file = file;
                    if (file.parent.path + "/" == this.plugin.settings.classFilesPath) {
                        menu.addSeparator();
                        menu.addItem((item) => {
                            item.setIcon("gear");
                            item.setTitle(`Manage <${file.basename}> fields`);
                            item.onClick((evt) => {
                                const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, file);
                                fileClassAttributeSelectModal.open();
                            });
                        });
                    }
                    else {
                        this.optionsList = new OptionsList(this.plugin, this.file, menu);
                        this.optionsList.createExtraOptionList();
                    }
                }
            }
        }));
    }
}

class SelectModal extends obsidian.DropdownComponent {
    constructor(containerEl) {
        super(containerEl);
        this.modals = {};
    }
}

class NoteFieldsCommandsModal extends obsidian.Modal {
    constructor(app, plugin, file) {
        super(app);
        this.app = app;
        this.plugin = plugin;
        this.file = file;
    }
    onOpen() {
        this.titleEl.setText(`Select the field to manage`);
        const optionsListContainer = this.contentEl.createDiv();
        this.select = new SelectModal(optionsListContainer);
        this.select.addOption("---", "Choose Field");
        this.optionsList = new OptionsList(this.plugin, this.file, this.select);
        this.optionsList.createExtraOptionList();
        this.select.onChange((value) => {
            this.select.modals[value]();
            this.close();
        });
        this.select.selectEl.focus();
    }
}

const linkTypes = {
    "backLinks": ["a.internal-link"],
    "outgoingLinks": ["a.internal-link"],
    "fileExplorer": ["div.nav-file-title-content"],
    "search": [".tree-item-inner"],
    "breadcrumb": ["div.internal-link", "td.internal-link"],
    "editor": ["span.cm-hmd-internal-link"]
};
const matchTypes = {
    'exact': "Exact word",
    'contains': "Contains this value",
    'whiteSpace': "Value within whitespace separated words",
    'startswith': "Start with this value",
    'endswith': "Ends with this value"
};
const matchSign = {
    'exact': "",
    'contains': "*",
    'startswith': "^",
    'endswith': "$",
    'whiteSpace': "~"
};
class CSSLink {
    constructor() {
        this.isTag = false;
        this.name = "";
        this.value = "";
        this.matchCaseSensitive = false;
        this.match = "exact";
        this.linksTypes = Object.keys(linkTypes);
    }
    render() {
        console.log(this.linksTypes.length == Object.keys(linkTypes).length);
        const selectedLinksTypes = [];
        const instructions = ["/*Supercharged links styling\ncopy and paste this in your css snippet\n"];
        if (this.linksTypes.length == Object.keys(linkTypes).length) {
            // if everything is selected : a single css selector is needed
            console.log("been here");
            const instruction = `[data-link-${this.isTag ?
                "tags" : this.name}${matchSign[this.match]}="${this.isTag ? "#" : ""}${this.value}"${this.matchCaseSensitive ?
                "" : " i"}]{\n    //put your styles here\n}\n`;
            instructions.push(instruction);
        }
        else {
            // if not: create specific selectors
            console.log("been there");
            Object.keys(linkTypes).forEach(element => {
                if (this.linksTypes.contains(element)) {
                    selectedLinksTypes.push(...linkTypes[element]);
                }
            });
            selectedLinksTypes.forEach(selector => {
                console.log("selector ", selector);
                const instruction = `${selector}[data-link-${this.isTag ?
                    "tags" : this.name}${matchSign[this.match]}="${this.isTag ? "#" : ""}${this.value}"${this.matchCaseSensitive ?
                    "" : " i"}]{\n"    //put your styles here\n}\n`;
                instructions.push(instruction);
            });
        }
        return instructions.join('\n');
    }
}

class CSSBuilderModal extends obsidian.Modal {
    constructor(plugin) {
        super(plugin.app);
        this.cssLink = new CSSLink();
    }
    onOpen() {
        this.titleEl.setText(`Describe the way you want to style your links`);
        // case sensitive
        const caseSensitiveTogglerContainer = this.contentEl.createDiv();
        const caseSensitiveToggler = this.createTogglerContainer(caseSensitiveTogglerContainer, "Case sensitive");
        caseSensitiveToggler.setTooltip("should the css selector be case sensitive?");
        caseSensitiveToggler.setValue(this.cssLink.matchCaseSensitive);
        caseSensitiveToggler.onChange(value => this.cssLink.matchCaseSensitive = value);
        // matching type
        const matchingTypeSelectContainer = this.contentEl.createDiv();
        const matchingTypeSelectLabel = matchingTypeSelectContainer.createDiv();
        matchingTypeSelectLabel.setText("Matching type: ");
        const select = new obsidian.DropdownComponent(matchingTypeSelectContainer);
        Object.keys(matchTypes).forEach(key => {
            select.addOption(key, matchTypes[key]);
            if (key == this.cssLink.match) {
                select.setValue(key);
            }
        });
        select.onChange((value) => {
            this.cssLink.match = value;
        });
        // is tag
        const tagTogglerContainer = this.contentEl.createDiv();
        const isTagToggler = this.createTogglerContainer(tagTogglerContainer, "Tag");
        isTagToggler.setTooltip("Is this attribute a tag?");
        isTagToggler.setValue(this.cssLink.isTag);
        isTagToggler.onChange(value => {
            this.cssLink.isTag = value;
            if (!value) {
                attrNameContainer.show();
            }
            else {
                attrNameContainer.hide();
            }
        });
        // attribute name
        const attrNameContainer = this.contentEl.createDiv();
        const attrName = this.createInputContainer(attrNameContainer, "Name", "Attribute name");
        attrName.onChange(name => {
            this.cssLink.name = name;
        });
        if (!this.cssLink.isTag) {
            attrNameContainer.show();
        }
        else {
            attrNameContainer.hide();
        }
        // attribute value
        const attrValueContainer = this.contentEl.createDiv();
        const attrValue = this.createInputContainer(attrValueContainer, "Value", "Attribute or Tag (without #) value");
        attrValue.onChange(value => { this.cssLink.value = value; });
        // links categories
        const linkTypesSelectContainer = this.contentEl.createDiv();
        Object.keys(linkTypes).forEach(value => {
            this.buildValueToggler(linkTypesSelectContainer, value);
        });
        // generate button
        const footer = this.contentEl.createDiv();
        const saveButton = new obsidian.ButtonComponent(footer);
        saveButton.setButtonText("Generate CSS Boilerplate");
        saveButton.onClick(() => {
            cssBoilerPlate.setValue(this.cssLink.render());
        });
        //result
        const cssBoilerPlateContainer = this.contentEl.createDiv();
        const cssBoilerPlate = new obsidian.TextAreaComponent(cssBoilerPlateContainer);
        cssBoilerPlate.inputEl.setAttr("rows", "10");
        cssBoilerPlate.inputEl.setAttr("style", "width: 30em");
    }
    buildValueToggler(valueGrid, linkType) {
        const valueSelectorContainer = valueGrid.createDiv({
            cls: "frontmatter-value-selector-container"
        });
        const valueTogglerContainer = valueSelectorContainer.createDiv({
            cls: "frontmatter-value-selector-toggler"
        });
        const valueToggler = new obsidian.ToggleComponent(valueTogglerContainer);
        this.cssLink.linksTypes.forEach(value => {
            if (value == linkType) {
                valueToggler.setValue(true);
            }
        });
        valueToggler.onChange(value => {
            if (value && !this.cssLink.linksTypes.includes(linkType)) {
                this.cssLink.linksTypes.push(linkType);
            }
            if (!value) {
                this.cssLink.linksTypes.remove(linkType);
            }
        });
        const valueLabel = valueSelectorContainer.createDiv({
            cls: "frontmatter-value-selector-label"
        });
        valueLabel.setText(linkType);
    }
    createTogglerContainer(parentNode, label) {
        const propertyContainerLabel = parentNode.createDiv({
            cls: 'frontmatter-checkbox-toggler'
        });
        propertyContainerLabel.setText(label);
        const toggler = new obsidian.ToggleComponent(parentNode);
        return toggler;
    }
    createInputContainer(parentNode, label, placeholder = "") {
        const propertyNameContainerLabel = parentNode.createDiv();
        propertyNameContainerLabel.setText(label);
        const input = new obsidian.TextComponent(parentNode);
        input.setPlaceholder(placeholder);
        return input;
    }
}

class SuperchargedLinks extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.initialProperties = [];
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Supercharged links loaded');
            yield this.loadSettings();
            this.settings.presetFields.forEach(prop => {
                const property = new Field();
                Object.assign(property, prop);
                this.initialProperties.push(property);
            });
            this.addSettingTab(new SuperchargedLinksSettingTab(this.app, this));
            this.registerMarkdownPostProcessor((el, ctx) => {
                updateElLinks(this.app, this.settings, el, ctx);
            });
            this.app.workspace.on('file-open', () => {
                updateDivLinks(this.app, this.settings);
            });
            this.app.metadataCache.on('changed', (_file) => {
                updateVisibleLinks(this.app, this.settings);
                updateDivLinks(this.app, this.settings);
            });
            this.registerCodeMirror((cm) => {
                cm.on("update", () => {
                    if (this.settings.enableEditor) {
                        updateEditorLinks(this.app, this.settings);
                    }
                });
            });
            this.observers = [];
            this.app.workspace.onLayoutReady(() => this.initViewObservers(this));
            this.app.workspace.on("layout-change", () => this.initViewObservers(this));
            this.addCommand({
                id: "field_options",
                name: "field options",
                hotkeys: [
                    {
                        modifiers: ["Alt"],
                        key: 'O',
                    },
                ],
                callback: () => {
                    const leaf = this.app.workspace.activeLeaf;
                    if (leaf.view instanceof obsidian.MarkdownView && leaf.view.file) {
                        const fieldsOptionsModal = new NoteFieldsCommandsModal(this.app, this, leaf.view.file);
                        fieldsOptionsModal.open();
                    }
                },
            });
            /* TODO : add a context menu for fileClass files to show the same options as in FileClassAttributeSelectModal*/
            this.addCommand({
                id: "fileClassAttr_options",
                name: "fileClass attributes options",
                hotkeys: [
                    {
                        modifiers: ["Alt"],
                        key: 'P',
                    },
                ],
                callback: () => {
                    const leaf = this.app.workspace.activeLeaf;
                    if (leaf.view instanceof obsidian.MarkdownView && leaf.view.file && `${leaf.view.file.parent.path}/` == this.settings.classFilesPath) {
                        const modal = new FileClassAttributeSelectModal(this, leaf.view.file);
                        modal.open();
                    }
                    else {
                        new obsidian.Notice("This is not a fileClass", 2500);
                    }
                },
            });
            this.addCommand({
                id: "css_snippet_helper",
                name: "CSS Snippet helper",
                callback: () => {
                    const formModal = new CSSBuilderModal(this);
                    formModal.open();
                },
            });
            new linkContextMenu(this);
        });
    }
    initViewObservers(plugin) {
        plugin.observers.forEach((observer) => observer.disconnect());
        plugin.registerViewType('backlink', plugin);
        plugin.registerViewType('outgoing-link', plugin);
        plugin.registerViewType('search', plugin);
        plugin.registerViewType('breadcrumbs-matrix', plugin, 'internal-link', '', false);
        plugin.registerViewType('graph-analysis', plugin, 'internal-link', '', false);
        plugin.registerViewType('starred', plugin, 'nav-file', 'nav-file-title-content');
        plugin.registerViewType('file-explorer', plugin, 'nav-file', 'nav-file-title-content');
    }
    registerViewType(viewTypeName, plugin, parent_class = 'tree-item', own_class = 'tree-item-inner', searchParent = true) {
        const leaves = this.app.workspace.getLeavesOfType(viewTypeName);
        if (leaves.length > 1)
            console.error('more than one ' + viewTypeName + ' panel');
        else if (leaves.length < 1)
            return;
        else {
            plugin.watchContainer(leaves[0].view.containerEl, plugin, parent_class, own_class, searchParent);
        }
    }
    watchContainer(container, plugin, parent_class = 'tree-item', own_class = 'tree-item-inner', searchParent = true) {
        const settings = plugin.settings;
        const app = plugin.app;
        let observer = new MutationObserver((records, _) => {
            records.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach((n) => {
                        if ('className' in n) {
                            // @ts-ignore
                            if (n.className.includes && typeof n.className.includes === 'function' && n.className.includes(parent_class)) {
                                if (searchParent) {
                                    const fileDivs = n.getElementsByClassName(own_class);
                                    for (let i = 0; i < fileDivs.length; ++i) {
                                        const link = fileDivs[i];
                                        clearExtraAttributes(link);
                                        if (settings.enableBacklinks) {
                                            updateDivExtraAttributes(app, settings, link, "");
                                        }
                                    }
                                }
                                else {
                                    clearExtraAttributes(n);
                                    updateDivExtraAttributes(app, settings, n, "");
                                }
                            }
                        }
                    });
                }
            });
        });
        observer.observe(container, { subtree: true, childList: true, attributes: false });
        plugin.observers.push(observer);
    }
    onunload() {
        this.observers.forEach((observer) => observer.disconnect());
        console.log('Supercharged links unloaded');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings.presetFields = this.initialProperties;
            yield this.saveData(this.settings);
        });
    }
}

module.exports = SuperchargedLinks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
