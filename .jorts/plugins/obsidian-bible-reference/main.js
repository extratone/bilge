/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => BibleReferencePlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/constants.ts
var APP_NAMING = {
  appName: "Bible Reference",
  appAuthor: "tim-hub",
  appUrl: "",
  defaultStatus: ""
};
var DEFAULT_SETTINGS = {
  language: "en",
  version: "WEB"
};

// src/VerseSuggester.ts
var import_obsidian = __toModule(require("obsidian"));

// src/VerseTypoCheck.ts
var shortReg = /\-{2}([123])*[A-z]{3,}\d{1,3}\:\d{1,3}(\-\d{1,3})*/;
var VerseTypoCheck = (verse) => {
  var _a;
  return (_a = verse.match(shortReg)) == null ? void 0 : _a.first();
};

// src/SuggestingVerse.ts
var SuggestingVerse = class {
  constructor(bookName, chapterNumber, verseNumber, verseNumberEnd, version = "web", language = "en") {
    this.bookName = bookName;
    this.chapterNumber = chapterNumber;
    this.verseNumber = verseNumber;
    this.verseNumberEnd = verseNumberEnd;
    this.bookName = bookName;
    this.chapterNumber = chapterNumber;
    this.verseNumber = verseNumber;
    this.verseNumberEnd = verseNumberEnd;
    this.version = version;
    this.language = language;
  }
  get queryString() {
    let queryString = `${this.bookName}+${this.chapterNumber}:`;
    if ((this == null ? void 0 : this.verseNumberEnd) > 0) {
      queryString += `${this.verseNumber}-${this.verseNumberEnd}`;
    } else {
      queryString += `${this.verseNumber}`;
    }
    return queryString;
  }
  getVerses() {
    return __async(this, null, function* () {
      const url = `https://bible-api.com/${this.queryString}`;
      const response = yield fetch(url);
      const data = yield response.json();
      return data.verses;
    });
  }
  fetchAndSetVersesText() {
    return __async(this, null, function* () {
      const verses = yield this.getVerses();
      let text = "";
      verses.forEach((verse) => {
        text += verse.text;
      });
      this.text = text;
    });
  }
  getVerseReference() {
    return `-- ${this.bookName} ${this.chapterNumber}:${this.verseNumber}${this.verseNumberEnd ? `-${this.verseNumberEnd}` : ""}`;
  }
};

// src/VerseSuggester.ts
var VerseSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onTrigger(cursor, editor, _) {
    const currentContent = editor.getLine(cursor.line).substring(0, cursor.ch);
    const match = VerseTypoCheck(currentContent);
    if (match) {
      console.debug("trigger on", currentContent);
      const editorSuggestTriggerInfo = {
        end: cursor,
        start: {
          line: cursor.line,
          ch: currentContent.lastIndexOf(match)
        },
        query: match
      };
      return editorSuggestTriggerInfo;
    }
    return null;
  }
  getSuggestions(context) {
    return __async(this, null, function* () {
      console.debug("get suggestion for query ", context.query.toLowerCase());
      const bookName = context.query.match(/[123]*[A-z]{3,}/).first();
      const numbersPartsOfQueryString = context.query.substring(2 + bookName.length);
      const numbers = numbersPartsOfQueryString.split(/[-:]+/);
      const chapterNumber = parseInt(numbers[0]);
      const verseNumber = parseInt(numbers[1]);
      const verseEndNumber = numbers.length === 3 ? parseInt(numbers[2]) : void 0;
      const suggestingVerse = new SuggestingVerse(bookName, chapterNumber, verseNumber, verseEndNumber);
      console.debug(bookName, chapterNumber, verseNumber, verseEndNumber, suggestingVerse);
      yield suggestingVerse.fetchAndSetVersesText();
      return [suggestingVerse];
    });
  }
  renderSuggestion(suggestion, el) {
    const outer = el.createDiv({ cls: "obr-suggester-container" });
    outer.createDiv({ cls: "obr-shortcode" }).setText(suggestion.text);
  }
  selectSuggestion(suggestion) {
    if (this.context) {
      this.context.editor.replaceRange(`> ${suggestion.text + `>> ${suggestion.getVerseReference()}`}`, this.context.start, this.context.end);
    }
  }
};

// main.ts
var BibleReferencePlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("loading plugin -", APP_NAMING.appName);
      yield this.loadSettings();
      this.registerEditorSuggest(new VerseSuggester(this));
    });
  }
  onunload() {
    console.log("unloading plugin", APP_NAMING.appName);
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
